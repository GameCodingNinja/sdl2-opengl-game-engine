
//
//  FILE NAME:  utilities.ang
//
//  DESC:       General purpose shared utility scripts
//


//
//  DESC: Color to the final color in time
//
void ColorTo( float time, CColor &in final, iSprite & sprite )
{
    CColor current = sprite.getColor();
    CColor inc = (final - current) / time;

    do
    {
        time -= HighResTimer.getElapsedTime();

        if( time < 0 )
        {
            sprite.setColor( final );
        }
        else
        {
            current += inc * HighResTimer.getElapsedTime();
            sprite.setColor( current );
        }

        Suspend();
    }
    while( time > 0 );
}

//
//  DESC: Shader color to the final color in time
//
void ShaderColorTo( float time, CColor current, CColor &in final, const string &in shaderMember )
{
    CColor inc = (final - current) / time;

    do
    {
        time -= HighResTimer.getElapsedTime();

        if( time < 0 )
        {
            ShaderMgr.setAllShaderColor( shaderMember, final );
        }
        else
        {
            current += inc * HighResTimer.getElapsedTime();

            ShaderMgr.setAllShaderColor( shaderMember, current );
        }

        Suspend();
    }
    while( time > 0 );
}

//
//  DESC: Alpha to the final alpha
//
void AlphaTo( float time, float final, iSprite & sprite )
{
    // Convert from RGB value to normalized value
    if( final > 1.5 )
        final *= 0.00390625f;

    float current = sprite.getAlpha();
    float inc = (final - current) / time;

    do
    {
        time -= HighResTimer.getElapsedTime();

        if( time < 0 )
        {
            sprite.setAlpha( final );
        }
        else
        {
            current += inc * HighResTimer.getElapsedTime();
            sprite.setAlpha( current );
        }

        Suspend();
    }
    while( time > 0 );
}

void AlphaTo( float time, float final, CMenu & menu )
{
    // Convert from RGB value to normalized value
    if( final > 1.5 )
        final *= 0.00390625f;

    float current = menu.getAlpha();
    float inc = (final - current) / time;

    do
    {
        time -= HighResTimer.getElapsedTime();

        if( time < 0 )
        {
            menu.setAlpha( final );
        }
        else
        {
            current += inc * HighResTimer.getElapsedTime();
            menu.setAlpha( current );
        }

        Suspend();
    }
    while( time > 0 );
}

//
//  DESC: Volume to the final volume
//
void VolumeTo( float time, int final, CSound & sound )
{
    float current = sound.getVolume();
    float inc = (float(final) - current) / time;
    int lastVolume = int(current);

    do
    {
        time -= HighResTimer.getElapsedTime();

        if( time < 0 )
        {
            sound.setVolume( int(final) );
        }
        else
        {
            current += inc * HighResTimer.getElapsedTime();

            if( lastVolume != int(current) )
            {
                sound.setVolume( int(current) );
                lastVolume = int(current);
            }
        }

        Suspend();
    }
    while( time > 0 );
}

//
//  DESC: Play the animation
//
void Play( int fps, iSprite & sprite, bool loop = false )
{
    float time = 1000.0 / fps;
    uint frameCount = sprite.getFrameCount();

    do
    {
        for( uint i = 0; i < frameCount; ++i )
        {
            sprite.setFrame( i );

            Hold( time );
        }
    }
    while( loop );
}

//
//  DESC: Hold the execution in time
//
void Hold( float time )
{
    do
    {
        time -= HighResTimer.getElapsedTime();

        Suspend();
    }
    while( time > 0 );
}

//
//  DESC: Screen fade in script
//
void Screen_FadeIn()
{
    CColor current(0,0,0,1);
    CColor final(1,1,1,1);
    ShaderColorTo( 500, current, final, "additive" );
}

//
//  DESC: Screen fade out script
//
void Screen_FadeOut()
{
    CColor current(1,1,1,1);
    CColor final(0,0,0,1);
    ShaderColorTo( 500, current, final, "additive" );
}
