
//
//  FILE NAME:  igamestate.ang
//
//  DESC:       Game state interface class
//

class iGameState
{
    // Flag to indicate state change
    private bool m_changeState = false;

    // Message to send to next state
    private CStateMessage m_stateMessage;

    // This objects current game state value
    private EGameState m_gameState = EGS_NULL;

    // This objects next game state value
    private EGameState m_nextState = EGS_NULL;

    //
    //  Default Constructor - required if defining a constructor with parameters
    //
    iGameState()
    {}

    //
    //  Constructor
    //
    iGameState( const EGameState gameState, const EGameState nextState )
    {
        m_gameState = gameState;
        m_nextState = nextState;
    }

    void init()
    {
        // Empty member to be overwritten
    }
    
    void handleEvent()
    {
        // Empty member to be overwritten
    }

    void update()
    {
        // Empty member to be overwritten
    }

    //
    void doChangeState()
    { m_changeState = true; }

    // Is the state done
    bool isStateChange()
    { return m_changeState; };

    // Get the current game state
    EGameState getState()
    { return m_gameState; }

    // Get the next game state
    EGameState getNextState()
    { return m_nextState; }

    // Get the message
    CStateMessage & getStateMessage()
    { return m_stateMessage; }
};
