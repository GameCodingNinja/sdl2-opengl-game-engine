
/************************************************************************
*    FILE NAME:       scripts.ang
*
*    DESCRIPTION:     Scripts specific to the Big Cash Back game
************************************************************************/

// Global variables
bool g_playBtnSparkle = true;
bool g_doubleFlicker = true;

/************************************************************************
*    desc:  Script for setting the play button
************************************************************************/
void PlayBtnActOver_Selected( iSprite & sprite )
{
    sprite.setVisible( true );
    
    AlphaTo( 20, 0, sprite );
    Hold( 25 );
    
    AlphaTo( 40, 1, sprite );
    Hold( 50 );
    AlphaTo( 40, 0, sprite );
    
    if( g_doubleFlicker )
    {
        g_doubleFlicker = false;
        
        Hold( 50 );
        AlphaTo( 40, 1, sprite );
        Hold( 50 );
        AlphaTo( 40, 0, sprite );
    }
    
    sprite.setVisible( false );
    
    DispatchEvent( EGE_MENU_SELECT_EXECUTE );
    DispatchEvent( EGE_MENU_REACTIVATE );
}

void PlayBtnActOver_Active( iSprite & sprite )
{
    sprite.setAlpha( 0 );
    sprite.setVisible( true );
    
    while(true)
    {
        AlphaTo( 600, 0.75, sprite );
        AlphaTo( 600, 0, sprite );
    }
}

void PlayBtnTxt_Selected( iSprite & sprite )
{
    if( sprite.getCurrentFrame() == 0 )
    {
        Hold( 350 );
        sprite.setFrame( 1 );
    }
}

void PlayBtnTxt_PlayReady( iSprite & sprite )
{
    DispatchEvent( EGE_MENU_REACTIVATE );
    g_playBtnSparkle = true;
    g_doubleFlicker = true;
    sprite.setFrame( 0 );
}

void PlayBtnSparkle_Init( iSprite & sprite )
{
    sprite.setVisible( false );
}

void PlayBtnSparkle_Selected( iSprite & sprite )
{
    if( g_playBtnSparkle )
    {
        g_playBtnSparkle = false;

        Spawn( "PlayBtnSparkle_Animate", sprite );
    }
}

void PlayBtnSparkle_Animate( iSprite & sprite )
{
    sprite.setVisible( true );

    Play( 12, sprite );

    sprite.setVisible( false );
}


/************************************************************************
*    desc:  Script for the total bet meter
************************************************************************/
void TotalBetActOver_Active( iSprite & sprite )
{
    sprite.setAlpha( 0 );
    sprite.setVisible( true );
    
    while(true)
    {
        AlphaTo( 500, 0.5, sprite );
        AlphaTo( 500, 0, sprite );
    }
}


/************************************************************************
*    desc:  Meter on init
************************************************************************/
void Meter_Init( iSprite & sprite )
{
    sprite.setVisible( false );
    sprite.setAlpha( 0 );
}


/************************************************************************
*    desc:  Meter on start
************************************************************************/
void Meter_Start( iSprite & sprite )
{
    sprite.setVisible( true );
    AlphaTo( 300, 1, sprite );
}


/************************************************************************
*    desc:  Meter on stop
************************************************************************/
void Meter_Stop( iSprite & sprite )
{
}


/************************************************************************
*    desc:  Meter on clear
************************************************************************/
void Meter_Clear( iSprite & sprite, uint value )
{
    if( sprite.isVisible() )
    {
        AlphaTo( 250, 0, sprite );
        sprite.setVisible( false );
        sprite.createFontString( "" + value );
    }
}


/************************************************************************
*    desc:  Sound functions
************************************************************************/
void SlotGame_StartSpinMusic()
{
    CSound sound = GetSound( "(big_pay_back)", "reelSpinMusic" );
    
    if( !sound.IsPlaying() )
    {
        SetVolume( "(big_pay_back)", "reelSpinMusic", MAX_SOUND_VOLUME );
        sound.Play(0, -1);
    }
    else if( sound.IsPaused() )
    {
        sound.Resume();
        VolumeTo( 1000.f, MAX_SOUND_VOLUME, sound );
    }
    else if( sound.GetVolume() != MAX_SOUND_VOLUME )
    {
        float inc = 1000.f / float(MAX_SOUND_VOLUME);
        int time = int((MAX_SOUND_VOLUME - sound.GetVolume()) * inc);
        
        VolumeTo( time, MAX_SOUND_VOLUME, sound );
    }
}

void SlotGame_StopSpinMusic()
{
    CSound sound = GetSound( "(big_pay_back)", "reelSpinMusic" );
    
    if( sound.IsPlaying() )
    {
        VolumeTo( 2000.f, 0.f, sound );
        sound.Pause();
    }
}

void SlotGame_FastStopSpinMusic()
{
    CSound sound = GetSound( "(big_pay_back)", "reelSpinMusic" );
    
    if( sound.IsPlaying() )
    {
        VolumeTo( 500.f, 0.f, sound );
        sound.Stop();
    }
}

/************************************************************************
*    desc:  Script for setting the look of the disabled state
************************************************************************/
void Control_Disabled( iSprite & sprite )
{
    CColor color = sprite.getDefaultColor();
    color.TransformHSV( 0, 0, 1 );

    sprite.setColor( color );
}


/************************************************************************
*    desc:  Script for setting the look of the inactive state
************************************************************************/
void Control_Inactive( iSprite & sprite )
{
    sprite.setDefaultColor();
}


/************************************************************************
*    desc:  Script for animating a symbol
************************************************************************/
void Symbol_Animate( iSprite & sprite )
{
    Play( 18, sprite );
}


/************************************************************************
*    desc:  Script for animating a symbol
************************************************************************/
void Symbol_Hold( iSprite & sprite )
{
    Hold( 1000 );
}